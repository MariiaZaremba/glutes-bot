from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import os
from apscheduler.schedulers.background import BackgroundScheduler
import asyncio

reminder_users = set()
user_progress = {}

TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –∑ Render Environment

challenge = [
    "–î–µ–Ω—å 1: 15 –ø—Ä–∏—Å—ñ–¥–∞–Ω—å + 10 –º—ñ—Å—Ç–∫—ñ–≤",
    "–î–µ–Ω—å 2: 20 –ø—Ä–∏—Å—ñ–¥–∞–Ω—å + 15 –≤–∏–ø–∞–¥—ñ–≤",
    "–î–µ–Ω—å 3: 25 –º—ñ—Å—Ç–∫—ñ–≤ + 20 –º–∞—Ö—ñ–≤ –Ω–∞–∑–∞–¥",
    "–î–µ–Ω—å 4: –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ üßò‚Äç‚ôÄÔ∏è",
    "–î–µ–Ω—å 5: 20 –ø—Ä–∏—Å—ñ–¥–∞–Ω—å + 20 –≤–∏–ø–∞–¥—ñ–≤ –≤–ø–µ—Ä–µ–¥",
    "–î–µ–Ω—å 6: 30 –º—ñ—Å—Ç–∫—ñ–≤ + 20 —Å—Ç—Ä–∏–±–∫—ñ–≤",
    "–î–µ–Ω—å 7: 40 –ø—Ä–∏—Å—ñ–¥–∞–Ω—å + 10 –±—É—Ä–ø—ñ"
]

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in user_progress:
        user_progress[user_id] = 0

    welcome_text = (
        "–ü—Ä–∏–≤—ñ—Ç! üëã\n\n"
        "–í—ñ—Ç–∞—é —Ç–µ–±–µ —É —á–µ–ª–µ–Ω–¥–∂—ñ **¬´–ü—Ä—É–∂–Ω—ñ —Å—ñ–¥–Ω–∏—Ü—ñ¬ª** üçë\n"
        "–ö–æ–∂–Ω–æ–≥–æ –¥–Ω—è –Ω–∞ —Ç–µ–±–µ —á–µ–∫–∞—Ç–∏–º–µ –∫–æ—Ä–æ—Ç–∫–µ, –∞–ª–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.\n\n"
        "üìÑ –î–µ—Ç–∞–ª—ñ —á–µ–ª–µ–Ω–¥–∂—É, –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —á–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –ø–æ—Ä–∞–¥–∏:\n"
        "[–ù–∞—Ç–∏—Å–Ω–∏ —Å—é–¥–∏, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞ Notion](https://silver-telephone-654.notion.site/1c93d72a013980129f93fedd04949345?pvs=4)\n\n"
        "–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:"
    )

    keyboard = [
        [InlineKeyboardButton("–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data='today')],
        [InlineKeyboardButton("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —â–µ —Ä–∞–∑ üìò", callback_data='info')],
        [InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ‚è∞", callback_data='remind')]
    ]

    await update.message.reply_text(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    chat_id = query.message.chat_id

    if query.data == 'today':
        day = user_progress.get(user_id, 0)
        if day >= len(challenge):
            await context.bot.send_message(
                chat_id=chat_id,
                text="–¢–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —á–µ–ª–µ–Ω–¥–∂ üéâ"
            )
        else:
            workout = challenge[day]
            keyboard = [[InlineKeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data='done')]]
            await context.bot.send_message(
                chat_id=chat_id,
                text=workout,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    elif query.data == 'done':
        user_progress[user_id] += 1
        await context.bot.send_message(
            chat_id=chat_id,
            text="–°—É–ø–µ—Ä! –ü–æ–±–∞—á–∏–º–æ—Å—å –∑–∞–≤—Ç—Ä–∞ üí™"
        )

    elif query.data == 'info':
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                "üìò –û—Å—å –ª—ñ–Ω–∫ –Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é —Ç–∞ –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ:\n"
                "[–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Notion](https://silver-telephone-654.notion.site/1c93d72a013980129f93fedd04949345?pvs=4)"
            ),
            parse_mode='Markdown'
        )

    elif query.data == 'remind':
        reminder_users.add(user_id)
        keyboard = [[InlineKeyboardButton("üîï –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –≤—ñ–¥ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å", callback_data='unremind')]]
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚úÖ –¢–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∞—Å—å –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!\n–©–æ—Ä–∞–Ω–∫—É —è –±—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø—Ä—è–º–æ —Å—é–¥–∏ üíå",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == 'unremind':
        if user_id in reminder_users:
            reminder_users.remove(user_id)
            await context.bot.send_message(
                chat_id=chat_id,
                text="üîï –¢–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∞—Å—å –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å."
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùóÔ∏è–¢–µ–±–µ –Ω–µ –±—É–ª–æ —É —Å–ø–∏—Å–∫—É –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö."
            )


# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–∞–Ω–∫–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def send_daily_reminders():
    for user_id in reminder_users:
        day = user_progress.get(user_id, 0)
        if day >= len(challenge):
            continue

        workout = challenge[day]
        text = f"üåû –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!\n–¢–≤–æ—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n\n*{workout}*"

        try:
            await app.bot.send_message(
                chat_id=int(user_id),
                text=text,
                parse_mode='Markdown'
            )
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button))

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
scheduler = BackgroundScheduler()
scheduler.add_job(
    lambda: asyncio.run(send_daily_reminders()),
    trigger='cron',
    hour=13,  # 13:00 UTC = 8:00 —Ä–∞–Ω–∫—É –∑–∞ CST (Chicago time)
    minute=0
)
scheduler.start()

app.run_polling()
